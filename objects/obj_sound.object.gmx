<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ini_open("save.ini");
current_music = ini_read_real("options", "music", 1);
current_sfx = ini_read_real("options", "sfx", 1);
mouse_on_sfx = false;
mouse_on_music = false;
ini_close();

music_buttons_width = sprite_get_width(spr_music_buttons);
music_buttons_height = sprite_get_height(spr_music_buttons);
music_x = ((room_width/2)-music_buttons_width)/2;
music_y = room_height/2;
music_x2 = music_x+music_buttons_width;
music_y2 = room_height/2+music_buttons_height;

///////
sfx_buttons_width = sprite_get_width(spr_sfx_buttons);
sfx_buttons_height = sprite_get_height(spr_sfx_buttons);
sfx_x = room_width/2 + music_x;
sfx_y = room_height/2;
sfx_x2 = sfx_x+ sfx_buttons_width;
sfx_y2 = room_height/2+sfx_buttons_height;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mouse hover
//Musix
if(mouse_x&gt;music_x &amp;&amp; mouse_x&lt;music_x2 &amp;&amp; mouse_y&gt;music_y &amp;&amp; mouse_y&lt;music_y2){
mouse_on_music = true;
}else{
mouse_on_music = false;
}
if(mouse_x&gt;sfx_x &amp;&amp; mouse_x&lt;sfx_x2 &amp;&amp; mouse_y&gt;sfx_y &amp;&amp; mouse_y&lt;sfx_y2){
mouse_on_sfx = true;
}else{
mouse_on_sfx = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///
if(mouse_on_music){
if(current_music){
audio_stop_all();

scr_save_to_ini_real("options", "music", 0);
current_music = false;
}else{

scr_save_to_ini_real("options", "music", 1);
current_music = true;
}

}
if(mouse_on_sfx){
if(current_sfx){

scr_save_to_ini_real("options", "sfx", 0);
current_sfx = false;

}else{

scr_save_to_ini_real("options", "sfx", 1);
current_sfx = true;

}
}
scr_check_sound();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(current_music){
if(mouse_on_music){
draw_sprite(spr_music_buttons, 1, music_x, music_y);
}else{
draw_sprite(spr_music_buttons, 0, music_x, music_y);
}


}else{
//If music is off
if(mouse_on_music){
draw_sprite(spr_music_buttons, 3, music_x, music_y);
}else{
draw_sprite(spr_music_buttons, 2, music_x, music_y);
}
}

if(current_sfx){
if(mouse_on_sfx){
draw_sprite(spr_sfx_buttons, 1, sfx_x, sfx_y);
}else{
draw_sprite(spr_sfx_buttons, 0, sfx_x, sfx_y);
}


}else{
//If music is off
if(mouse_on_sfx){
draw_sprite(spr_sfx_buttons, 3, sfx_x, sfx_y);
}else{
draw_sprite(spr_sfx_buttons, 2, sfx_x, sfx_y);
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto(rm_options);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
